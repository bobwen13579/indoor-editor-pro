const path = require('path');
const webpack = require('webpack');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const tsImportPluginFactory = require('ts-import-plugin');
const TerserPlugin = require('terser-webpack-plugin')
// const { BundleAnalyzerPlugin } = require('webpack-bundle-analyzer');
const UglifyJsPlugin = require('uglifyjs-webpack-plugin');
const { CleanWebpackPlugin } = require('clean-webpack-plugin');
const AntdDayjsWebpackPlugin = require('antd-dayjs-webpack-plugin');
const config = require('./server/config/config.json');

const env = process.env.NODE_ENV;
const isDevMode = env !== 'production';
const plugins = [];

if (!isDevMode) {
  // production environment plugins
  plugins.push(new CleanWebpackPlugin());
}
if (isDevMode) {
  // development environment plugins
  // plugins.push(new BundleAnalyzerPlugin());
}

// common plugins
plugins.push(
  new AntdDayjsWebpackPlugin(),
  new MiniCssExtractPlugin({
    filename: isDevMode ? '[name].css' : '[name].[contenthash:20].css',
    chunkFilename: isDevMode ? '[id].css' : '[id].[contenthash:20].css',
  }),
  new webpack.WatchIgnorePlugin([/css\.d\.ts$/, /less\.d\.ts$/]),
);

const baseCSSLoaderConfigs = [
  {
    loader: MiniCssExtractPlugin.loader,
    options: {
      // only enable hot in development
      hmr: isDevMode,
      // if hmr does not work, this is a forceful method.
      // reloadAll: true,
    },
  },
  {
    // generate d.ts file for css/less/sass
    loader: require.resolve('@teamsupercell/typings-for-css-modules-loader'),
    options: {
      banner: '// autogenerated by typings-for-css-modules-loader. \n// Please do not change this file!',
    },
  },
  {
    loader: 'css-loader',
    options: {
      modules: {
        localIdentName: '[name]__[local]--[hash:base64:5]',
      },
    },
  },
  {
    loader: 'postcss-loader',
    options: {
      config: {
        path: 'postcss.config.js',
      },
    },
  },
];

module.exports = {
  // only in production mode, tree shaking is worked
  // 注意：如果你想看bundle analysis，请设置成production。并忽略报告中的socket-client。
  // mode: 'production',
  mode: env,
  entry: {
    app: './client/App.tsx',
  },
  devtool: isDevMode ? 'inline-source-map' : false,
  devServer: {
    port: 9988,
    contentBase: './dist',
    stats: 'minimal',
    hot: true,
    historyApiFallback: true,
    disableHostCheck: true,
    // proxy: {
    //   '**': {
    //     target: `http://localhost:${config.app.port}`,
    //     changeOrigin: true,
    //   },
    // },
  },
  module: {
    rules: [
      {
        test: /\.(jsx|tsx|js|ts)$/,
        use: [
          {
            loader: 'ts-loader',
            options: {
              transpileOnly: true,
              getCustomTransformers: () => ({
                before: [tsImportPluginFactory({
                  libraryName: 'antd',
                  libraryDirectory: 'es',
                  style: true,
                })],
              }),
              compilerOptions: {
                module: 'es2015',
              },
            },
          },
        ],
        exclude: /node_modules/,
      },
      {
        test: /\.css$/,
        use: baseCSSLoaderConfigs,
      },
      {
        test: /\.less$/,
        use: [
          'style-loader',
          {
            loader: MiniCssExtractPlugin.loader,
          },
          'css-loader',
          {
            loader: 'less-loader',
            options: {
              javascriptEnabled: true,
            },
          },
        ],
        include: /node_modules/,
      },
      {
        test: /\.less$/,
        use: [
          ...baseCSSLoaderConfigs,
          'less-loader',
        ],
        exclude: /node_modules/,
      },
      {
        // load images
        test: /\.(png|svg|jpg|gif)$/,
        use: [
          {
            loader: 'file-loader',
            options: {
              publicPath: isDevMode ? '' : 'https://static.dist10.cn',
            },
          },
        ],
      },
      {
        // load font files
        test: /\.(woff|woff2|eot|ttf|otf)$/,
        use: [
          'file-loader',
        ],
      },
      {
        test: /\.(csv|tsv)$/,
        use: [
          'csv-loader',
        ],
      },
      {
        test: /\.xml$/,
        use: [
          'xml-loader',
        ],
      },
    ],
  },
  resolve: {
    extensions: ['.js', '.ts', '.tsx', '.d.ts'],
    alias: {
      client: path.resolve(__dirname, 'client'),
      server: path.resolve(__dirname, 'server'),
    },
  },
  output: {
    filename: isDevMode ? '[name].js' : '[name].[contenthash:20].js',
    path: path.resolve(__dirname, 'dist'),
    publicPath: '/',
  },
  optimization: {
    moduleIds: 'hashed',
    splitChunks: {
      chunks: 'async',
      minSize: 30000,
      maxSize: 0,
      minChunks: 1,
      maxAsyncRequests: 6,
      maxInitialRequests: 4,
      automaticNameDelimiter: '~',
      automaticNameMaxLength: 30,
      cacheGroups: {
        defaultVendors: {
          test: /[\\/]node_modules[\\/]/,
          priority: -10,
        },
        default: {
          minChunks: 2,
          priority: -20,
          reuseExistingChunk: true,
        },
      },
    },
    runtimeChunk: 'single',
    minimizer: [
      new TerserPlugin({
        cache: true,
        parallel: true,
        terserOptions: {
          output: {
            comments: false,
          },
        },
      }),
    ],
  },
  plugins,
};
